unit TestUnitFinder_DelphiParser;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Classes, UnitFinder_DelphiParser, Sysutils;

type
  // Test methods for class TInterfaceUsesClause

  TTestDelphiParser = class(TTestCase)
  private
    FPos:integer;
    FTestData:TStringList;
    FSourceCode:AnsiString;
    FSourcePos:integer;

  public
    FDelphiUnit: TDelphiUnit;

    procedure SetUp; override;
    procedure TearDown; override;

    procedure LoadTestFile(FileName:string);
    function EOF:boolean;
    function NextSourceLine:string;
    procedure SkipSeparatorLine;
    function GetNextDataBlock:string;

    procedure OnGetSourceEvent(Sender:TObject; Buffer:PAnsiChar; MaxLength:integer; var Length:integer);
    procedure OnInsertSourceEvent(Sender:TObject; Position:integer; Source:AnsiString);
    procedure OnDeleteSourceEvent(Sender:TObject; Position:integer; Count:integer);

    procedure CheckUnits(TrueValue,TestValue,Msg:string);

    procedure Tests; virtual; abstract;

  published
    procedure TestRunner;
  end;


  TTestLoad = class(TTestDelphiParser)
  public
    procedure SetUp; override;
    procedure Tests; override;
  end;

  TTestLoadBadData = class(TTestDelphiParser)
  public
    procedure SetUp; override;
    procedure Tests; override;
  end;

  TTestAdd = class(TTestDelphiParser)
  public
    procedure SetUp; override;
    procedure Tests; override;
  end;

  TTestAddIntRemoveImp = class(TTestDelphiParser)
  public
    procedure SetUp; override;
    procedure Tests; override;
  end;

  TTestRemoveIntAddImp = class(TTestDelphiParser)
  public
    procedure SetUp; override;
    procedure Tests; override;
  end;

  TTestProgramAdd = class(TTestDelphiParser)
  public
    procedure SetUp; override;
    procedure Tests; override;
  end;


implementation


procedure TTestDelphiParser.CheckUnits(TrueValue, TestValue, Msg: string);
begin
  CheckEquals(#13#10+Trim(TrueValue),#13#10+Trim(TestValue),Msg + ' - ' + FTestName +' ('+IntToStr(FPos)+')');
end;

function TTestDelphiParser.EOF: boolean;
begin
  result := FPos >= FTestData.Count;
end;

function TTestDelphiParser.NextSourceLine: string;
begin
  if EOF then
    raise Exception.Create('Test Source Unexpected EOF');
  result := FTestData[FPos];
  Inc(FPos);
end;

procedure TTestDelphiParser.OnDeleteSourceEvent(Sender: TObject; Position, Count: integer);
begin
  Delete(FSourceCode,Position,Count);
end;

procedure TTestDelphiParser.OnGetSourceEvent(Sender: TObject; Buffer: PAnsiChar; MaxLength: integer; var Length: integer);
var
  s:AnsiString;
begin
  s := copy(FSourceCode,FSourcePos,10);
  StrPLCopy(Buffer,s,MaxLength-1);
  Length := System.Length(s);
  Inc(FSourcePos,Length);
end;

procedure TTestDelphiParser.OnInsertSourceEvent(Sender: TObject; Position: integer; Source: AnsiString);
begin
  Insert(Source,FSourceCode,Position);
end;

procedure TTestDelphiParser.SkipSeparatorLine;
begin
  if Copy(NextSourceLine,1,5) <> '=====' then
    raise Exception.Create('Missing "=====..." separator line.');
end;

function TTestDelphiParser.GetNextDataBlock: string;
begin
  result := '';
  while not EOF do begin
    result := result + NextSourceLine + #13#10;
    if (EOF) or (Copy(FTestData[FPos],1,5) = '=====') then
        break;
  end;
end;

procedure TTestDelphiParser.LoadTestFile(FileName: string);
begin
  FPos := 0;
  FTestName := '';
  FTestData.LoadFromFile(ExtractFilePath(ParamStr(0)) + FileName );
end;

procedure TTestDelphiParser.SetUp;
begin
  FDelphiUnit := TDelphiUnit.Create;
  FDelphiUnit.OnGetSource := OnGetSourceEvent;
  FDelphiUnit.OnInsertSource := OnInsertSourceEvent;
  FDelphiUnit.OnDeleteSource := OnDeleteSourceEvent;

  FTestData := TStringList.Create;
end;


procedure TTestDelphiParser.TearDown;
begin
  FDelphiUnit.Free;

  FTestData.Free;
end;

(*
  Test data is formatted like this:
  ====================
  Test Name
  ====================
  Source Code
  ==========
  List of Interface units
  ==========
  List of Implementation units
  <whitespace>

  ... Repeat ...

*)
procedure TTestDelphiParser.TestRunner;
begin
  try
    while not EOF do begin
      SkipSeparatorLine;
      FTestName := NextSourceLine;
      SkipSeparatorLine;

      Tests;

    end;
  except
    on E:Exception do begin
      E.Message := E.Message + #13#10+'--------------------------------------'+#13#10;
      if FTestName <> '' then
        E.Message := E.Message + 'Test Name: ' + FTestName + #13#10;
      E.Message := E.Message + 'Test Source Line: ' + IntToStr(FPos) + #13#10;
      raise;
    end;
  end;
end;

{ TTestLoad }

procedure TTestLoad.SetUp;
begin
  inherited;
  LoadTestFile('Test_Load.txt');
end;

procedure TTestLoad.Tests;
var
  InterfaceUnits:string;
  ImplementationUnits:string;
begin
  FSourcePos := 1;
  FSourceCode := UTF8Encode(GetNextDataBlock);
  SkipSeparatorLine;
  InterfaceUnits := GetNextDataBlock;
  SkipSeparatorLine;
  ImplementationUnits := GetNextDataBlock;

  FDelphiUnit.Load;
  CheckUnits(InterfaceUnits,FDelphiUnit.InterfaceUsesClause.Units.Text,'Interface');
  CheckUnits(ImplementationUnits,FDelphiUnit.ImplementationUsesClause.Units.Text,'Implementation');
end;

{ TTestLoadBadData }

procedure TTestLoadBadData.SetUp;
begin
  inherited;
  LoadTestFile('Test_LoadBadData.txt');
end;

procedure TTestLoadBadData.Tests;
begin
  FSourceCode := UTF8Encode(GetNextDataBlock);
  FDelphiUnit.Load;
  CheckFalse(FDelphiUnit.IsLoaded,
                         'No Parse Error Found'#13#10+#13#10+
                         'Interface Units Found:' +#13#10+ FDelphiUnit.InterfaceUsesClause.Units.Text+#13#10+
                         'Implementation Units Found:' +#13#10+ FDelphiUnit.InterfaceUsesClause.Units.Text+#13#10);
end;

{ TTestAdd }

procedure TTestAdd.SetUp;
begin
  inherited;
  LoadTestFile('Test_Add.txt');
end;

procedure TTestAdd.Tests;
var
  AddUnit:string;
  ResultCode:string;
begin
  FSourcePos := 1;
  FSourceCode := UTF8Encode(GetNextDataBlock);
  SkipSeparatorLine;
  AddUnit := Trim(GetNextDataBlock);
  SkipSeparatorLine;
  ResultCode := GetNextDataBlock;

  FDelphiUnit.Load;
  FDelphiUnit.AddToInterfaceUses(AddUnit);
  CheckEquals(Trim(ResultCode),Trim(FSourceCode));
end;

{ TTestRemove }

procedure TTestAddIntRemoveImp.SetUp;
begin
  inherited;
  LoadTestFile('Test_AddIntRemoveImp.txt');
end;

procedure TTestAddIntRemoveImp.Tests;
var
  AddUnit:string;
  ResultCode:string;
begin
  FSourcePos := 1;
  FSourceCode := UTF8Encode(GetNextDataBlock);
  SkipSeparatorLine;
  AddUnit := Trim(GetNextDataBlock);
  SkipSeparatorLine;
  ResultCode := GetNextDataBlock;

  FDelphiUnit.Load;
  FDelphiUnit.AddToInterfaceUses(AddUnit);
  CheckEquals(Trim(ResultCode),Trim(FSourceCode),'Internal Source: <'+FDelphiUnit.SourceCode+'>');
end;

{ TTestRemoveIntAddImp }

procedure TTestRemoveIntAddImp.SetUp;
begin
  inherited;
  LoadTestFile('Test_RemoveIntAddImp.txt');
end;

procedure TTestRemoveIntAddImp.Tests;
var
  AddUnit:string;
  ResultCode:AnsiString;
begin
  FSourcePos := 1;
  FSourceCode := UTF8Encode(GetNextDataBlock);
  SkipSeparatorLine;
  AddUnit := Trim(GetNextDataBlock);
  SkipSeparatorLine;
  ResultCode := UTF8Encode(GetNextDataBlock);

  FDelphiUnit.Load;
  FDelphiUnit.AddToImplementationUses(AddUnit);
  CheckEquals(Trim(ResultCode),Trim(FSourceCode),'Internal Source: <'+FDelphiUnit.SourceCode+'>');
end;

{ TTestProgramAdd }

procedure TTestProgramAdd.SetUp;
begin
  inherited;
  LoadTestFile('Test_ProgramAdd.txt');
end;

procedure TTestProgramAdd.Tests;
var
  AddUnit:string;
  ResultCode:string;
begin
  FSourcePos := 1;
  FSourceCode := UTF8Encode(GetNextDataBlock);
  SkipSeparatorLine;
  AddUnit := Trim(GetNextDataBlock);
  SkipSeparatorLine;
  ResultCode := GetNextDataBlock;

  FDelphiUnit.Load;
  FDelphiUnit.AddToInterfaceUses(AddUnit);
  CheckEquals(Trim(ResultCode),Trim(FSourceCode));
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TTestLoad.Suite);
  RegisterTest(TTestLoadBadData.Suite);
  RegisterTest(TTestAdd.Suite);
  RegisterTest(TTestAddIntRemoveImp.Suite);
  RegisterTest(TTestRemoveIntAddImp.Suite);
  RegisterTest(TTestProgramAdd.Suite);
end.

